// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/prompt/prompt.go

// Package mock_awsctl is a generated GoMock package.
package mock_awsctl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// PromptForInput mocks base method.
func (m *MockPrompter) PromptForInput(label, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForInput", label, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForInput indicates an expected call of PromptForInput.
func (mr *MockPrompterMockRecorder) PromptForInput(label, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForInput", reflect.TypeOf((*MockPrompter)(nil).PromptForInput), label, defaultValue)
}

// PromptForInputWithValidation mocks base method.
func (m *MockPrompter) PromptForInputWithValidation(prompt, defaultValue string, validate func(string) error) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForInputWithValidation", prompt, defaultValue, validate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForInputWithValidation indicates an expected call of PromptForInputWithValidation.
func (mr *MockPrompterMockRecorder) PromptForInputWithValidation(prompt, defaultValue, validate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForInputWithValidation", reflect.TypeOf((*MockPrompter)(nil).PromptForInputWithValidation), prompt, defaultValue, validate)
}

// PromptForSelection mocks base method.
func (m *MockPrompter) PromptForSelection(label string, items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSelection", label, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSelection indicates an expected call of PromptForSelection.
func (mr *MockPrompterMockRecorder) PromptForSelection(label, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSelection", reflect.TypeOf((*MockPrompter)(nil).PromptForSelection), label, items)
}
