// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/eks/interface.go

// Package mock_eks is a generated GoMock package.
package mock_eks

import (
	context "context"
	reflect "reflect"

	eks "github.com/BerryBytes/awsctl/internal/eks"
	models "github.com/BerryBytes/awsctl/models"
	common "github.com/BerryBytes/awsctl/utils/common"
	aws "github.com/aws/aws-sdk-go-v2/aws"
	config "github.com/aws/aws-sdk-go-v2/config"
	eks0 "github.com/aws/aws-sdk-go-v2/service/eks"
	gomock "github.com/golang/mock/gomock"
)

// MockEKSServiceInterface is a mock of EKSServiceInterface interface.
type MockEKSServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEKSServiceInterfaceMockRecorder
}

// MockEKSServiceInterfaceMockRecorder is the mock recorder for MockEKSServiceInterface.
type MockEKSServiceInterfaceMockRecorder struct {
	mock *MockEKSServiceInterface
}

// NewMockEKSServiceInterface creates a new mock instance.
func NewMockEKSServiceInterface(ctrl *gomock.Controller) *MockEKSServiceInterface {
	mock := &MockEKSServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEKSServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEKSServiceInterface) EXPECT() *MockEKSServiceInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockEKSServiceInterface) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockEKSServiceInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEKSServiceInterface)(nil).Run))
}

// MockEKSAPI is a mock of EKSAPI interface.
type MockEKSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEKSAPIMockRecorder
}

// MockEKSAPIMockRecorder is the mock recorder for MockEKSAPI.
type MockEKSAPIMockRecorder struct {
	mock *MockEKSAPI
}

// NewMockEKSAPI creates a new mock instance.
func NewMockEKSAPI(ctrl *gomock.Controller) *MockEKSAPI {
	mock := &MockEKSAPI{ctrl: ctrl}
	mock.recorder = &MockEKSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEKSAPI) EXPECT() *MockEKSAPIMockRecorder {
	return m.recorder
}

// DescribeCluster mocks base method.
func (m *MockEKSAPI) DescribeCluster(ctx context.Context, input *eks0.DescribeClusterInput, opts ...func(*eks0.Options)) (*eks0.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCluster", varargs...)
	ret0, _ := ret[0].(*eks0.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCluster indicates an expected call of DescribeCluster.
func (mr *MockEKSAPIMockRecorder) DescribeCluster(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCluster", reflect.TypeOf((*MockEKSAPI)(nil).DescribeCluster), varargs...)
}

// ListClusters mocks base method.
func (m *MockEKSAPI) ListClusters(ctx context.Context, input *eks0.ListClustersInput, opts ...func(*eks0.Options)) (*eks0.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(*eks0.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockEKSAPIMockRecorder) ListClusters(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockEKSAPI)(nil).ListClusters), varargs...)
}

// MockEKSAdapterInterface is a mock of EKSAdapterInterface interface.
type MockEKSAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEKSAdapterInterfaceMockRecorder
}

// MockEKSAdapterInterfaceMockRecorder is the mock recorder for MockEKSAdapterInterface.
type MockEKSAdapterInterfaceMockRecorder struct {
	mock *MockEKSAdapterInterface
}

// NewMockEKSAdapterInterface creates a new mock instance.
func NewMockEKSAdapterInterface(ctrl *gomock.Controller) *MockEKSAdapterInterface {
	mock := &MockEKSAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockEKSAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEKSAdapterInterface) EXPECT() *MockEKSAdapterInterfaceMockRecorder {
	return m.recorder
}

// DescribeCluster mocks base method.
func (m *MockEKSAdapterInterface) DescribeCluster(ctx context.Context, input *eks0.DescribeClusterInput, opts ...func(*eks0.Options)) (*eks0.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCluster", varargs...)
	ret0, _ := ret[0].(*eks0.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCluster indicates an expected call of DescribeCluster.
func (mr *MockEKSAdapterInterfaceMockRecorder) DescribeCluster(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCluster", reflect.TypeOf((*MockEKSAdapterInterface)(nil).DescribeCluster), varargs...)
}

// GetClusterDetails mocks base method.
func (m *MockEKSAdapterInterface) GetClusterDetails(ctx context.Context, clusterName string) (*models.EKSCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDetails", ctx, clusterName)
	ret0, _ := ret[0].(*models.EKSCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDetails indicates an expected call of GetClusterDetails.
func (mr *MockEKSAdapterInterfaceMockRecorder) GetClusterDetails(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDetails", reflect.TypeOf((*MockEKSAdapterInterface)(nil).GetClusterDetails), ctx, clusterName)
}

// ListClusters mocks base method.
func (m *MockEKSAdapterInterface) ListClusters(ctx context.Context, input *eks0.ListClustersInput, opts ...func(*eks0.Options)) (*eks0.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(*eks0.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockEKSAdapterInterfaceMockRecorder) ListClusters(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockEKSAdapterInterface)(nil).ListClusters), varargs...)
}

// ListEKSClusters mocks base method.
func (m *MockEKSAdapterInterface) ListEKSClusters(ctx context.Context) ([]models.EKSCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEKSClusters", ctx)
	ret0, _ := ret[0].([]models.EKSCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEKSClusters indicates an expected call of ListEKSClusters.
func (mr *MockEKSAdapterInterfaceMockRecorder) ListEKSClusters(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEKSClusters", reflect.TypeOf((*MockEKSAdapterInterface)(nil).ListEKSClusters), ctx)
}

// UpdateKubeconfig mocks base method.
func (m *MockEKSAdapterInterface) UpdateKubeconfig(cluster *models.EKSCluster, profile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKubeconfig", cluster, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubeconfig indicates an expected call of UpdateKubeconfig.
func (mr *MockEKSAdapterInterfaceMockRecorder) UpdateKubeconfig(cluster, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubeconfig", reflect.TypeOf((*MockEKSAdapterInterface)(nil).UpdateKubeconfig), cluster, profile)
}

// MockEKSPromptInterface is a mock of EKSPromptInterface interface.
type MockEKSPromptInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEKSPromptInterfaceMockRecorder
}

// MockEKSPromptInterfaceMockRecorder is the mock recorder for MockEKSPromptInterface.
type MockEKSPromptInterfaceMockRecorder struct {
	mock *MockEKSPromptInterface
}

// NewMockEKSPromptInterface creates a new mock instance.
func NewMockEKSPromptInterface(ctrl *gomock.Controller) *MockEKSPromptInterface {
	mock := &MockEKSPromptInterface{ctrl: ctrl}
	mock.recorder = &MockEKSPromptInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEKSPromptInterface) EXPECT() *MockEKSPromptInterfaceMockRecorder {
	return m.recorder
}

// GetAWSConfig mocks base method.
func (m *MockEKSPromptInterface) GetAWSConfig() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSConfig")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAWSConfig indicates an expected call of GetAWSConfig.
func (mr *MockEKSPromptInterfaceMockRecorder) GetAWSConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSConfig", reflect.TypeOf((*MockEKSPromptInterface)(nil).GetAWSConfig))
}

// PromptForEKSCluster mocks base method.
func (m *MockEKSPromptInterface) PromptForEKSCluster(clusters []models.EKSCluster) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForEKSCluster", clusters)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForEKSCluster indicates an expected call of PromptForEKSCluster.
func (mr *MockEKSPromptInterfaceMockRecorder) PromptForEKSCluster(clusters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForEKSCluster", reflect.TypeOf((*MockEKSPromptInterface)(nil).PromptForEKSCluster), clusters)
}

// PromptForManualCluster mocks base method.
func (m *MockEKSPromptInterface) PromptForManualCluster() (string, string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForManualCluster")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// PromptForManualCluster indicates an expected call of PromptForManualCluster.
func (mr *MockEKSPromptInterfaceMockRecorder) PromptForManualCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForManualCluster", reflect.TypeOf((*MockEKSPromptInterface)(nil).PromptForManualCluster))
}

// PromptForProfile mocks base method.
func (m *MockEKSPromptInterface) PromptForProfile() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForProfile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForProfile indicates an expected call of PromptForProfile.
func (mr *MockEKSPromptInterfaceMockRecorder) PromptForProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForProfile", reflect.TypeOf((*MockEKSPromptInterface)(nil).PromptForProfile))
}

// SelectEKSAction mocks base method.
func (m *MockEKSPromptInterface) SelectEKSAction() (eks.EKSAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectEKSAction")
	ret0, _ := ret[0].(eks.EKSAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectEKSAction indicates an expected call of SelectEKSAction.
func (mr *MockEKSPromptInterfaceMockRecorder) SelectEKSAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectEKSAction", reflect.TypeOf((*MockEKSPromptInterface)(nil).SelectEKSAction))
}

// MockConfigLoader is a mock of ConfigLoader interface.
type MockConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigLoaderMockRecorder
}

// MockConfigLoaderMockRecorder is the mock recorder for MockConfigLoader.
type MockConfigLoaderMockRecorder struct {
	mock *MockConfigLoader
}

// NewMockConfigLoader creates a new mock instance.
func NewMockConfigLoader(ctrl *gomock.Controller) *MockConfigLoader {
	mock := &MockConfigLoader{ctrl: ctrl}
	mock.recorder = &MockConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigLoader) EXPECT() *MockConfigLoaderMockRecorder {
	return m.recorder
}

// LoadDefaultConfig mocks base method.
func (m *MockConfigLoader) LoadDefaultConfig(ctx context.Context, opts ...func(*config.LoadOptions) error) (aws.Config, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadDefaultConfig", varargs...)
	ret0, _ := ret[0].(aws.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDefaultConfig indicates an expected call of LoadDefaultConfig.
func (mr *MockConfigLoaderMockRecorder) LoadDefaultConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDefaultConfig", reflect.TypeOf((*MockConfigLoader)(nil).LoadDefaultConfig), varargs...)
}

// MockEKSClientFactory is a mock of EKSClientFactory interface.
type MockEKSClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEKSClientFactoryMockRecorder
}

// MockEKSClientFactoryMockRecorder is the mock recorder for MockEKSClientFactory.
type MockEKSClientFactoryMockRecorder struct {
	mock *MockEKSClientFactory
}

// NewMockEKSClientFactory creates a new mock instance.
func NewMockEKSClientFactory(ctrl *gomock.Controller) *MockEKSClientFactory {
	mock := &MockEKSClientFactory{ctrl: ctrl}
	mock.recorder = &MockEKSClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEKSClientFactory) EXPECT() *MockEKSClientFactoryMockRecorder {
	return m.recorder
}

// NewEKSClient mocks base method.
func (m *MockEKSClientFactory) NewEKSClient(cfg aws.Config, fs common.FileSystemInterface) eks.EKSAdapterInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEKSClient", cfg, fs)
	ret0, _ := ret[0].(eks.EKSAdapterInterface)
	return ret0
}

// NewEKSClient indicates an expected call of NewEKSClient.
func (mr *MockEKSClientFactoryMockRecorder) NewEKSClient(cfg, fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEKSClient", reflect.TypeOf((*MockEKSClientFactory)(nil).NewEKSClient), cfg, fs)
}
