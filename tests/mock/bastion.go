// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/bastion/bastion_interface.go

// Package mock_awsctl is a generated GoMock package.
package mock_awsctl

import (
	context "context"
	reflect "reflect"

	models "github.com/BerryBytes/awsctl/models"
	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// MockEC2ClientInterface is a mock of EC2ClientInterface interface.
type MockEC2ClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEC2ClientInterfaceMockRecorder
}

// MockEC2ClientInterfaceMockRecorder is the mock recorder for MockEC2ClientInterface.
type MockEC2ClientInterfaceMockRecorder struct {
	mock *MockEC2ClientInterface
}

// NewMockEC2ClientInterface creates a new mock instance.
func NewMockEC2ClientInterface(ctrl *gomock.Controller) *MockEC2ClientInterface {
	mock := &MockEC2ClientInterface{ctrl: ctrl}
	mock.recorder = &MockEC2ClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2ClientInterface) EXPECT() *MockEC2ClientInterfaceMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method.
func (m *MockEC2ClientInterface) DescribeInstances(ctx context.Context, input *ec2.DescribeInstancesInput, opts ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockEC2ClientInterfaceMockRecorder) DescribeInstances(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockEC2ClientInterface)(nil).DescribeInstances), varargs...)
}

// ListBastionInstances mocks base method.
func (m *MockEC2ClientInterface) ListBastionInstances(ctx context.Context) ([]models.EC2Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBastionInstances", ctx)
	ret0, _ := ret[0].([]models.EC2Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBastionInstances indicates an expected call of ListBastionInstances.
func (mr *MockEC2ClientInterfaceMockRecorder) ListBastionInstances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBastionInstances", reflect.TypeOf((*MockEC2ClientInterface)(nil).ListBastionInstances), ctx)
}

// MockEC2DescribeInstancesAPI is a mock of EC2DescribeInstancesAPI interface.
type MockEC2DescribeInstancesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEC2DescribeInstancesAPIMockRecorder
}

// MockEC2DescribeInstancesAPIMockRecorder is the mock recorder for MockEC2DescribeInstancesAPI.
type MockEC2DescribeInstancesAPIMockRecorder struct {
	mock *MockEC2DescribeInstancesAPI
}

// NewMockEC2DescribeInstancesAPI creates a new mock instance.
func NewMockEC2DescribeInstancesAPI(ctrl *gomock.Controller) *MockEC2DescribeInstancesAPI {
	mock := &MockEC2DescribeInstancesAPI{ctrl: ctrl}
	mock.recorder = &MockEC2DescribeInstancesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2DescribeInstancesAPI) EXPECT() *MockEC2DescribeInstancesAPIMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method.
func (m *MockEC2DescribeInstancesAPI) DescribeInstances(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockEC2DescribeInstancesAPIMockRecorder) DescribeInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockEC2DescribeInstancesAPI)(nil).DescribeInstances), varargs...)
}

// MockBastionPrompterInterface is a mock of BastionPrompterInterface interface.
type MockBastionPrompterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBastionPrompterInterfaceMockRecorder
}

// MockBastionPrompterInterfaceMockRecorder is the mock recorder for MockBastionPrompterInterface.
type MockBastionPrompterInterfaceMockRecorder struct {
	mock *MockBastionPrompterInterface
}

// NewMockBastionPrompterInterface creates a new mock instance.
func NewMockBastionPrompterInterface(ctrl *gomock.Controller) *MockBastionPrompterInterface {
	mock := &MockBastionPrompterInterface{ctrl: ctrl}
	mock.recorder = &MockBastionPrompterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBastionPrompterInterface) EXPECT() *MockBastionPrompterInterfaceMockRecorder {
	return m.recorder
}

// PromptForBastionHost mocks base method.
func (m *MockBastionPrompterInterface) PromptForBastionHost() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForBastionHost")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForBastionHost indicates an expected call of PromptForBastionHost.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForBastionHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForBastionHost", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForBastionHost))
}

// PromptForBastionInstance mocks base method.
func (m *MockBastionPrompterInterface) PromptForBastionInstance(instances []models.EC2Instance) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForBastionInstance", instances)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForBastionInstance indicates an expected call of PromptForBastionInstance.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForBastionInstance(instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForBastionInstance", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForBastionInstance), instances)
}

// PromptForConfirmation mocks base method.
func (m *MockBastionPrompterInterface) PromptForConfirmation(prompt string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForConfirmation", prompt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForConfirmation indicates an expected call of PromptForConfirmation.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForConfirmation(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForConfirmation", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForConfirmation), prompt)
}

// PromptForLocalPort mocks base method.
func (m *MockBastionPrompterInterface) PromptForLocalPort(name string, defaultPort int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForLocalPort", name, defaultPort)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForLocalPort indicates an expected call of PromptForLocalPort.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForLocalPort(name, defaultPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForLocalPort", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForLocalPort), name, defaultPort)
}

// PromptForRemoteHost mocks base method.
func (m *MockBastionPrompterInterface) PromptForRemoteHost() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRemoteHost")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRemoteHost indicates an expected call of PromptForRemoteHost.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForRemoteHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRemoteHost", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForRemoteHost))
}

// PromptForRemotePort mocks base method.
func (m *MockBastionPrompterInterface) PromptForRemotePort(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRemotePort", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRemotePort indicates an expected call of PromptForRemotePort.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForRemotePort(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRemotePort", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForRemotePort), name)
}

// PromptForSOCKSProxyPort mocks base method.
func (m *MockBastionPrompterInterface) PromptForSOCKSProxyPort(defaultPort int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSOCKSProxyPort", defaultPort)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSOCKSProxyPort indicates an expected call of PromptForSOCKSProxyPort.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForSOCKSProxyPort(defaultPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSOCKSProxyPort", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForSOCKSProxyPort), defaultPort)
}

// PromptForSSHKeyPath mocks base method.
func (m *MockBastionPrompterInterface) PromptForSSHKeyPath(defaultPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSSHKeyPath", defaultPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSSHKeyPath indicates an expected call of PromptForSSHKeyPath.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForSSHKeyPath(defaultPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSSHKeyPath", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForSSHKeyPath), defaultPath)
}

// PromptForSSHUser mocks base method.
func (m *MockBastionPrompterInterface) PromptForSSHUser(defaultUser string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSSHUser", defaultUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSSHUser indicates an expected call of PromptForSSHUser.
func (mr *MockBastionPrompterInterfaceMockRecorder) PromptForSSHUser(defaultUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSSHUser", reflect.TypeOf((*MockBastionPrompterInterface)(nil).PromptForSSHUser), defaultUser)
}

// SelectAction mocks base method.
func (m *MockBastionPrompterInterface) SelectAction() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAction")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAction indicates an expected call of SelectAction.
func (mr *MockBastionPrompterInterfaceMockRecorder) SelectAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAction", reflect.TypeOf((*MockBastionPrompterInterface)(nil).SelectAction))
}

// MockBastionServiceInterface is a mock of BastionServiceInterface interface.
type MockBastionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBastionServiceInterfaceMockRecorder
}

// MockBastionServiceInterfaceMockRecorder is the mock recorder for MockBastionServiceInterface.
type MockBastionServiceInterfaceMockRecorder struct {
	mock *MockBastionServiceInterface
}

// NewMockBastionServiceInterface creates a new mock instance.
func NewMockBastionServiceInterface(ctrl *gomock.Controller) *MockBastionServiceInterface {
	mock := &MockBastionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBastionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBastionServiceInterface) EXPECT() *MockBastionServiceInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockBastionServiceInterface) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockBastionServiceInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockBastionServiceInterface)(nil).Run))
}
