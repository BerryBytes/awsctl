// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/rds/interface.go

// Package mock_rds is a generated GoMock package.
package mock_rds

import (
	context "context"
	reflect "reflect"

	rds "github.com/BerryBytes/awsctl/internal/rds"
	models "github.com/BerryBytes/awsctl/models"
	rds0 "github.com/aws/aws-sdk-go-v2/service/rds"
	gomock "github.com/golang/mock/gomock"
)

// MockRDSServiceInterface is a mock of RDSServiceInterface interface.
type MockRDSServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRDSServiceInterfaceMockRecorder
}

// MockRDSServiceInterfaceMockRecorder is the mock recorder for MockRDSServiceInterface.
type MockRDSServiceInterfaceMockRecorder struct {
	mock *MockRDSServiceInterface
}

// NewMockRDSServiceInterface creates a new mock instance.
func NewMockRDSServiceInterface(ctrl *gomock.Controller) *MockRDSServiceInterface {
	mock := &MockRDSServiceInterface{ctrl: ctrl}
	mock.recorder = &MockRDSServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDSServiceInterface) EXPECT() *MockRDSServiceInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRDSServiceInterface) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRDSServiceInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRDSServiceInterface)(nil).Run))
}

// MockRDSAPI is a mock of RDSAPI interface.
type MockRDSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRDSAPIMockRecorder
}

// MockRDSAPIMockRecorder is the mock recorder for MockRDSAPI.
type MockRDSAPIMockRecorder struct {
	mock *MockRDSAPI
}

// NewMockRDSAPI creates a new mock instance.
func NewMockRDSAPI(ctrl *gomock.Controller) *MockRDSAPI {
	mock := &MockRDSAPI{ctrl: ctrl}
	mock.recorder = &MockRDSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDSAPI) EXPECT() *MockRDSAPIMockRecorder {
	return m.recorder
}

// DescribeDBClusters mocks base method.
func (m *MockRDSAPI) DescribeDBClusters(ctx context.Context, input *rds0.DescribeDBClustersInput, opts ...func(*rds0.Options)) (*rds0.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusters", varargs...)
	ret0, _ := ret[0].(*rds0.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters.
func (mr *MockRDSAPIMockRecorder) DescribeDBClusters(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockRDSAPI)(nil).DescribeDBClusters), varargs...)
}

// DescribeDBInstances mocks base method.
func (m *MockRDSAPI) DescribeDBInstances(ctx context.Context, input *rds0.DescribeDBInstancesInput, opts ...func(*rds0.Options)) (*rds0.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*rds0.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockRDSAPIMockRecorder) DescribeDBInstances(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockRDSAPI)(nil).DescribeDBInstances), varargs...)
}

// MockRDSAdapterInterface is a mock of RDSAdapterInterface interface.
type MockRDSAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRDSAdapterInterfaceMockRecorder
}

// MockRDSAdapterInterfaceMockRecorder is the mock recorder for MockRDSAdapterInterface.
type MockRDSAdapterInterfaceMockRecorder struct {
	mock *MockRDSAdapterInterface
}

// NewMockRDSAdapterInterface creates a new mock instance.
func NewMockRDSAdapterInterface(ctrl *gomock.Controller) *MockRDSAdapterInterface {
	mock := &MockRDSAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockRDSAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDSAdapterInterface) EXPECT() *MockRDSAdapterInterfaceMockRecorder {
	return m.recorder
}

// DescribeDBClusters mocks base method.
func (m *MockRDSAdapterInterface) DescribeDBClusters(ctx context.Context, input *rds0.DescribeDBClustersInput, opts ...func(*rds0.Options)) (*rds0.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusters", varargs...)
	ret0, _ := ret[0].(*rds0.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters.
func (mr *MockRDSAdapterInterfaceMockRecorder) DescribeDBClusters(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockRDSAdapterInterface)(nil).DescribeDBClusters), varargs...)
}

// DescribeDBInstances mocks base method.
func (m *MockRDSAdapterInterface) DescribeDBInstances(ctx context.Context, input *rds0.DescribeDBInstancesInput, opts ...func(*rds0.Options)) (*rds0.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*rds0.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockRDSAdapterInterfaceMockRecorder) DescribeDBInstances(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockRDSAdapterInterface)(nil).DescribeDBInstances), varargs...)
}

// GenerateAuthToken mocks base method.
func (m *MockRDSAdapterInterface) GenerateAuthToken(endpoint, dbUser, region string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthToken", endpoint, dbUser, region)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthToken indicates an expected call of GenerateAuthToken.
func (mr *MockRDSAdapterInterfaceMockRecorder) GenerateAuthToken(endpoint, dbUser, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthToken", reflect.TypeOf((*MockRDSAdapterInterface)(nil).GenerateAuthToken), endpoint, dbUser, region)
}

// GetConnectionEndpoint mocks base method.
func (m *MockRDSAdapterInterface) GetConnectionEndpoint(ctx context.Context, identifier string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionEndpoint", ctx, identifier)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionEndpoint indicates an expected call of GetConnectionEndpoint.
func (mr *MockRDSAdapterInterfaceMockRecorder) GetConnectionEndpoint(ctx, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionEndpoint", reflect.TypeOf((*MockRDSAdapterInterface)(nil).GetConnectionEndpoint), ctx, identifier)
}

// ListRDSResources mocks base method.
func (m *MockRDSAdapterInterface) ListRDSResources(ctx context.Context) ([]models.RDSInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRDSResources", ctx)
	ret0, _ := ret[0].([]models.RDSInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRDSResources indicates an expected call of ListRDSResources.
func (mr *MockRDSAdapterInterfaceMockRecorder) ListRDSResources(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRDSResources", reflect.TypeOf((*MockRDSAdapterInterface)(nil).ListRDSResources), ctx)
}

// MockRDSPromptInterface is a mock of RDSPromptInterface interface.
type MockRDSPromptInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRDSPromptInterfaceMockRecorder
}

// MockRDSPromptInterfaceMockRecorder is the mock recorder for MockRDSPromptInterface.
type MockRDSPromptInterfaceMockRecorder struct {
	mock *MockRDSPromptInterface
}

// NewMockRDSPromptInterface creates a new mock instance.
func NewMockRDSPromptInterface(ctrl *gomock.Controller) *MockRDSPromptInterface {
	mock := &MockRDSPromptInterface{ctrl: ctrl}
	mock.recorder = &MockRDSPromptInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDSPromptInterface) EXPECT() *MockRDSPromptInterfaceMockRecorder {
	return m.recorder
}

// GetAWSConfig mocks base method.
func (m *MockRDSPromptInterface) GetAWSConfig() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSConfig")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAWSConfig indicates an expected call of GetAWSConfig.
func (mr *MockRDSPromptInterfaceMockRecorder) GetAWSConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSConfig", reflect.TypeOf((*MockRDSPromptInterface)(nil).GetAWSConfig))
}

// PromptForDBUser mocks base method.
func (m *MockRDSPromptInterface) PromptForDBUser() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForDBUser")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForDBUser indicates an expected call of PromptForDBUser.
func (mr *MockRDSPromptInterfaceMockRecorder) PromptForDBUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForDBUser", reflect.TypeOf((*MockRDSPromptInterface)(nil).PromptForDBUser))
}

// PromptForManualEndpoint mocks base method.
func (m *MockRDSPromptInterface) PromptForManualEndpoint() (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForManualEndpoint")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// PromptForManualEndpoint indicates an expected call of PromptForManualEndpoint.
func (mr *MockRDSPromptInterfaceMockRecorder) PromptForManualEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForManualEndpoint", reflect.TypeOf((*MockRDSPromptInterface)(nil).PromptForManualEndpoint))
}

// PromptForProfile mocks base method.
func (m *MockRDSPromptInterface) PromptForProfile() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForProfile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForProfile indicates an expected call of PromptForProfile.
func (mr *MockRDSPromptInterfaceMockRecorder) PromptForProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForProfile", reflect.TypeOf((*MockRDSPromptInterface)(nil).PromptForProfile))
}

// PromptForRDSInstance mocks base method.
func (m *MockRDSPromptInterface) PromptForRDSInstance(instances []models.RDSInstance) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRDSInstance", instances)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRDSInstance indicates an expected call of PromptForRDSInstance.
func (mr *MockRDSPromptInterfaceMockRecorder) PromptForRDSInstance(instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRDSInstance", reflect.TypeOf((*MockRDSPromptInterface)(nil).PromptForRDSInstance), instances)
}

// SelectRDSAction mocks base method.
func (m *MockRDSPromptInterface) SelectRDSAction() (rds.RDSAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRDSAction")
	ret0, _ := ret[0].(rds.RDSAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRDSAction indicates an expected call of SelectRDSAction.
func (mr *MockRDSPromptInterfaceMockRecorder) SelectRDSAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRDSAction", reflect.TypeOf((*MockRDSPromptInterface)(nil).SelectRDSAction))
}
