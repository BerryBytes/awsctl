// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/sso/interface.go
//
// Generated by this command:
//
//	mockgen -source=./internal/sso/interface.go -destination=./tests/mock/sso/sso.go -package=mock_sso
//

// Package mock_sso is a generated GoMock package.
package mock_sso

import (
	reflect "reflect"
	time "time"

	sso "github.com/BerryBytes/awsctl/internal/sso"
	models "github.com/BerryBytes/awsctl/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSSOClient is a mock of SSOClient interface.
type MockSSOClient struct {
	ctrl     *gomock.Controller
	recorder *MockSSOClientMockRecorder
	isgomock struct{}
}

// MockSSOClientMockRecorder is the mock recorder for MockSSOClient.
type MockSSOClientMockRecorder struct {
	mock *MockSSOClient
}

// NewMockSSOClient creates a new mock instance.
func NewMockSSOClient(ctrl *gomock.Controller) *MockSSOClient {
	mock := &MockSSOClient{ctrl: ctrl}
	mock.recorder = &MockSSOClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSOClient) EXPECT() *MockSSOClientMockRecorder {
	return m.recorder
}

// AwsSTSGetCallerIdentity mocks base method.
func (m *MockSSOClient) AwsSTSGetCallerIdentity(profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwsSTSGetCallerIdentity", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AwsSTSGetCallerIdentity indicates an expected call of AwsSTSGetCallerIdentity.
func (mr *MockSSOClientMockRecorder) AwsSTSGetCallerIdentity(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwsSTSGetCallerIdentity", reflect.TypeOf((*MockSSOClient)(nil).AwsSTSGetCallerIdentity), profile)
}

// ConfigureDefaultProfile mocks base method.
func (m *MockSSOClient) ConfigureDefaultProfile(region, output string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureDefaultProfile", region, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureDefaultProfile indicates an expected call of ConfigureDefaultProfile.
func (mr *MockSSOClientMockRecorder) ConfigureDefaultProfile(region, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDefaultProfile", reflect.TypeOf((*MockSSOClient)(nil).ConfigureDefaultProfile), region, output)
}

// ConfigureGet mocks base method.
func (m *MockSSOClient) ConfigureGet(key, profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureGet", key, profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureGet indicates an expected call of ConfigureGet.
func (mr *MockSSOClientMockRecorder) ConfigureGet(key, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureGet", reflect.TypeOf((*MockSSOClient)(nil).ConfigureGet), key, profile)
}

// ConfigureSSOProfile mocks base method.
func (m *MockSSOClient) ConfigureSSOProfile(profile, region, accountID, role, ssoStartUrl, ssoSession string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureSSOProfile", profile, region, accountID, role, ssoStartUrl, ssoSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureSSOProfile indicates an expected call of ConfigureSSOProfile.
func (mr *MockSSOClientMockRecorder) ConfigureSSOProfile(profile, region, accountID, role, ssoStartUrl, ssoSession any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureSSOProfile", reflect.TypeOf((*MockSSOClient)(nil).ConfigureSSOProfile), profile, region, accountID, role, ssoStartUrl, ssoSession)
}

// ConfigureSet mocks base method.
func (m *MockSSOClient) ConfigureSet(key, value, profile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureSet", key, value, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureSet indicates an expected call of ConfigureSet.
func (mr *MockSSOClientMockRecorder) ConfigureSet(key, value, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureSet", reflect.TypeOf((*MockSSOClient)(nil).ConfigureSet), key, value, profile)
}

// GetAWSOutput mocks base method.
func (m *MockSSOClient) GetAWSOutput(profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSOutput", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSOutput indicates an expected call of GetAWSOutput.
func (mr *MockSSOClientMockRecorder) GetAWSOutput(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSOutput", reflect.TypeOf((*MockSSOClient)(nil).GetAWSOutput), profile)
}

// GetAWSRegion mocks base method.
func (m *MockSSOClient) GetAWSRegion(profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSRegion", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSRegion indicates an expected call of GetAWSRegion.
func (mr *MockSSOClientMockRecorder) GetAWSRegion(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSRegion", reflect.TypeOf((*MockSSOClient)(nil).GetAWSRegion), profile)
}

// GetCachedSsoAccessToken mocks base method.
func (m *MockSSOClient) GetCachedSsoAccessToken(profile string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedSsoAccessToken", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCachedSsoAccessToken indicates an expected call of GetCachedSsoAccessToken.
func (mr *MockSSOClientMockRecorder) GetCachedSsoAccessToken(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedSsoAccessToken", reflect.TypeOf((*MockSSOClient)(nil).GetCachedSsoAccessToken), profile)
}

// GetRoleCredentials mocks base method.
func (m *MockSSOClient) GetRoleCredentials(accessToken, roleName, accountID string) (*models.AWSCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleCredentials", accessToken, roleName, accountID)
	ret0, _ := ret[0].(*models.AWSCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleCredentials indicates an expected call of GetRoleCredentials.
func (mr *MockSSOClientMockRecorder) GetRoleCredentials(accessToken, roleName, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleCredentials", reflect.TypeOf((*MockSSOClient)(nil).GetRoleCredentials), accessToken, roleName, accountID)
}

// GetSSOAccountName mocks base method.
func (m *MockSSOClient) GetSSOAccountName(accountID, profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSOAccountName", accountID, profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSOAccountName indicates an expected call of GetSSOAccountName.
func (mr *MockSSOClientMockRecorder) GetSSOAccountName(accountID, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSOAccountName", reflect.TypeOf((*MockSSOClient)(nil).GetSSOAccountName), accountID, profile)
}

// InitSSO mocks base method.
func (m *MockSSOClient) InitSSO(refresh, noBrowser bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSSO", refresh, noBrowser)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSSO indicates an expected call of InitSSO.
func (mr *MockSSOClientMockRecorder) InitSSO(refresh, noBrowser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSSO", reflect.TypeOf((*MockSSOClient)(nil).InitSSO), refresh, noBrowser)
}

// SSOLogin mocks base method.
func (m *MockSSOClient) SSOLogin(awsProfile string, refresh, noBrowser bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOLogin", awsProfile, refresh, noBrowser)
	ret0, _ := ret[0].(error)
	return ret0
}

// SSOLogin indicates an expected call of SSOLogin.
func (mr *MockSSOClientMockRecorder) SSOLogin(awsProfile, refresh, noBrowser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOLogin", reflect.TypeOf((*MockSSOClient)(nil).SSOLogin), awsProfile, refresh, noBrowser)
}

// SetupSSO mocks base method.
func (m *MockSSOClient) SetupSSO(opts sso.SSOFlagOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupSSO", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupSSO indicates an expected call of SetupSSO.
func (mr *MockSSOClientMockRecorder) SetupSSO(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupSSO", reflect.TypeOf((*MockSSOClient)(nil).SetupSSO), opts)
}

// TryGetCallerIdentity mocks base method.
func (m *MockSSOClient) TryGetCallerIdentity(profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryGetCallerIdentity", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryGetCallerIdentity indicates an expected call of TryGetCallerIdentity.
func (mr *MockSSOClientMockRecorder) TryGetCallerIdentity(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryGetCallerIdentity", reflect.TypeOf((*MockSSOClient)(nil).TryGetCallerIdentity), profile)
}

// ValidProfiles mocks base method.
func (m *MockSSOClient) ValidProfiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidProfiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidProfiles indicates an expected call of ValidProfiles.
func (mr *MockSSOClientMockRecorder) ValidProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidProfiles", reflect.TypeOf((*MockSSOClient)(nil).ValidProfiles))
}

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
	isgomock struct{}
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// PromptForRegion mocks base method.
func (m *MockPrompter) PromptForRegion(defaultRegion string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRegion", defaultRegion)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRegion indicates an expected call of PromptForRegion.
func (mr *MockPrompterMockRecorder) PromptForRegion(defaultRegion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRegion", reflect.TypeOf((*MockPrompter)(nil).PromptForRegion), defaultRegion)
}

// PromptRequired mocks base method.
func (m *MockPrompter) PromptRequired(label string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptRequired", label)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptRequired indicates an expected call of PromptRequired.
func (mr *MockPrompterMockRecorder) PromptRequired(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptRequired", reflect.TypeOf((*MockPrompter)(nil).PromptRequired), label)
}

// PromptWithDefault mocks base method.
func (m *MockPrompter) PromptWithDefault(label, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptWithDefault", label, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptWithDefault indicates an expected call of PromptWithDefault.
func (mr *MockPrompterMockRecorder) PromptWithDefault(label, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptWithDefault", reflect.TypeOf((*MockPrompter)(nil).PromptWithDefault), label, defaultValue)
}

// PromptYesNo mocks base method.
func (m *MockPrompter) PromptYesNo(label string, defaultValue bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptYesNo", label, defaultValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptYesNo indicates an expected call of PromptYesNo.
func (mr *MockPrompterMockRecorder) PromptYesNo(label, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptYesNo", reflect.TypeOf((*MockPrompter)(nil).PromptYesNo), label, defaultValue)
}

// SelectFromList mocks base method.
func (m *MockPrompter) SelectFromList(label string, items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromList", label, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromList indicates an expected call of SelectFromList.
func (mr *MockPrompterMockRecorder) SelectFromList(label, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromList", reflect.TypeOf((*MockPrompter)(nil).SelectFromList), label, items)
}

// MockPromptRunner is a mock of PromptRunner interface.
type MockPromptRunner struct {
	ctrl     *gomock.Controller
	recorder *MockPromptRunnerMockRecorder
	isgomock struct{}
}

// MockPromptRunnerMockRecorder is the mock recorder for MockPromptRunner.
type MockPromptRunnerMockRecorder struct {
	mock *MockPromptRunner
}

// NewMockPromptRunner creates a new mock instance.
func NewMockPromptRunner(ctrl *gomock.Controller) *MockPromptRunner {
	mock := &MockPromptRunner{ctrl: ctrl}
	mock.recorder = &MockPromptRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptRunner) EXPECT() *MockPromptRunnerMockRecorder {
	return m.recorder
}

// RunPrompt mocks base method.
func (m *MockPromptRunner) RunPrompt(label, defaultValue string, validate func(string) error) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPrompt", label, defaultValue, validate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPrompt indicates an expected call of RunPrompt.
func (mr *MockPromptRunnerMockRecorder) RunPrompt(label, defaultValue, validate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPrompt", reflect.TypeOf((*MockPromptRunner)(nil).RunPrompt), label, defaultValue, validate)
}

// RunSelect mocks base method.
func (m *MockPromptRunner) RunSelect(label string, items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSelect", label, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunSelect indicates an expected call of RunSelect.
func (mr *MockPromptRunnerMockRecorder) RunSelect(label, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSelect", reflect.TypeOf((*MockPromptRunner)(nil).RunSelect), label, items)
}
