// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/sso/selection.go

// Package mock_sso is a generated GoMock package.
package mock_awsctl

import (
	reflect "reflect"

	models "github.com/BerryBytes/awsctl/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAWSSelectionClient is a mock of AWSSelectionClient interface.
type MockAWSSelectionClient struct {
	ctrl     *gomock.Controller
	recorder *MockAWSSelectionClientMockRecorder
}

// MockAWSSelectionClientMockRecorder is the mock recorder for MockAWSSelectionClient.
type MockAWSSelectionClientMockRecorder struct {
	mock *MockAWSSelectionClient
}

// NewMockAWSSelectionClient creates a new mock instance.
func NewMockAWSSelectionClient(ctrl *gomock.Controller) *MockAWSSelectionClient {
	mock := &MockAWSSelectionClient{ctrl: ctrl}
	mock.recorder = &MockAWSSelectionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSSelectionClient) EXPECT() *MockAWSSelectionClientMockRecorder {
	return m.recorder
}

// ExtractAccountNames mocks base method.
func (m *MockAWSSelectionClient) ExtractAccountNames(profile *models.SSOProfile) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractAccountNames", profile)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExtractAccountNames indicates an expected call of ExtractAccountNames.
func (mr *MockAWSSelectionClientMockRecorder) ExtractAccountNames(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractAccountNames", reflect.TypeOf((*MockAWSSelectionClient)(nil).ExtractAccountNames), profile)
}

// FindAccount mocks base method.
func (m *MockAWSSelectionClient) FindAccount(profile *models.SSOProfile, accountName string) (*models.SSOAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccount", profile, accountName)
	ret0, _ := ret[0].(*models.SSOAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccount indicates an expected call of FindAccount.
func (mr *MockAWSSelectionClientMockRecorder) FindAccount(profile, accountName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockAWSSelectionClient)(nil).FindAccount), profile, accountName)
}

// FindProfile mocks base method.
func (m *MockAWSSelectionClient) FindProfile(cfg *models.Config, profileName string) (*models.SSOProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProfile", cfg, profileName)
	ret0, _ := ret[0].(*models.SSOProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProfile indicates an expected call of FindProfile.
func (mr *MockAWSSelectionClientMockRecorder) FindProfile(cfg, profileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProfile", reflect.TypeOf((*MockAWSSelectionClient)(nil).FindProfile), cfg, profileName)
}

// GetUniqueProfiles mocks base method.
func (m *MockAWSSelectionClient) GetUniqueProfiles(cfg *models.Config) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqueProfiles", cfg)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniqueProfiles indicates an expected call of GetUniqueProfiles.
func (mr *MockAWSSelectionClientMockRecorder) GetUniqueProfiles(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqueProfiles", reflect.TypeOf((*MockAWSSelectionClient)(nil).GetUniqueProfiles), cfg)
}

// SelectAccount mocks base method.
func (m *MockAWSSelectionClient) SelectAccount(accounts []models.SSOAccount) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccount", accounts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccount indicates an expected call of SelectAccount.
func (mr *MockAWSSelectionClientMockRecorder) SelectAccount(accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccount", reflect.TypeOf((*MockAWSSelectionClient)(nil).SelectAccount), accounts)
}

// SelectAccountFromProfile mocks base method.
func (m *MockAWSSelectionClient) SelectAccountFromProfile(profile *models.SSOProfile) (*models.SSOAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccountFromProfile", profile)
	ret0, _ := ret[0].(*models.SSOAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccountFromProfile indicates an expected call of SelectAccountFromProfile.
func (mr *MockAWSSelectionClientMockRecorder) SelectAccountFromProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccountFromProfile", reflect.TypeOf((*MockAWSSelectionClient)(nil).SelectAccountFromProfile), profile)
}

// SelectProfile mocks base method.
func (m *MockAWSSelectionClient) SelectProfile(profiles []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProfile", profiles)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProfile indicates an expected call of SelectProfile.
func (mr *MockAWSSelectionClientMockRecorder) SelectProfile(profiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProfile", reflect.TypeOf((*MockAWSSelectionClient)(nil).SelectProfile), profiles)
}

// SelectProfileFromConfig mocks base method.
func (m *MockAWSSelectionClient) SelectProfileFromConfig(cfg *models.Config) (*models.SSOProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProfileFromConfig", cfg)
	ret0, _ := ret[0].(*models.SSOProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProfileFromConfig indicates an expected call of SelectProfileFromConfig.
func (mr *MockAWSSelectionClientMockRecorder) SelectProfileFromConfig(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProfileFromConfig", reflect.TypeOf((*MockAWSSelectionClient)(nil).SelectProfileFromConfig), cfg)
}

// SelectRole mocks base method.
func (m *MockAWSSelectionClient) SelectRole(roles []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRole", roles)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRole indicates an expected call of SelectRole.
func (mr *MockAWSSelectionClientMockRecorder) SelectRole(roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRole", reflect.TypeOf((*MockAWSSelectionClient)(nil).SelectRole), roles)
}

// SelectRoleFromAccount mocks base method.
func (m *MockAWSSelectionClient) SelectRoleFromAccount(account *models.SSOAccount) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRoleFromAccount", account)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRoleFromAccount indicates an expected call of SelectRoleFromAccount.
func (mr *MockAWSSelectionClientMockRecorder) SelectRoleFromAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRoleFromAccount", reflect.TypeOf((*MockAWSSelectionClient)(nil).SelectRoleFromAccount), account)
}
