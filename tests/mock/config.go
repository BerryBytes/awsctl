// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/sso/config.go

// Package mock_awsctl is a generated GoMock package.
package mock_awsctl

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder struct {
	mock *MockCommandExecutor
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor) EXPECT() *MockCommandExecutorMockRecorder {
	return m.recorder
}

// LookPath mocks base method.
func (m *MockCommandExecutor) LookPath(file string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookPath", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookPath indicates an expected call of LookPath.
func (mr *MockCommandExecutorMockRecorder) LookPath(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookPath", reflect.TypeOf((*MockCommandExecutor)(nil).LookPath), file)
}

// RunCommand mocks base method.
func (m *MockCommandExecutor) RunCommand(name string, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommand", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockCommandExecutorMockRecorder) RunCommand(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockCommandExecutor)(nil).RunCommand), varargs...)
}

// RunCommandWithInput mocks base method.
func (m *MockCommandExecutor) RunCommandWithInput(name, input string, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, input}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommandWithInput", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommandWithInput indicates an expected call of RunCommandWithInput.
func (mr *MockCommandExecutorMockRecorder) RunCommandWithInput(name, input interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, input}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandWithInput", reflect.TypeOf((*MockCommandExecutor)(nil).RunCommandWithInput), varargs...)
}

// RunInteractiveCommand mocks base method.
func (m *MockCommandExecutor) RunInteractiveCommand(ctx context.Context, name string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunInteractiveCommand", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInteractiveCommand indicates an expected call of RunInteractiveCommand.
func (mr *MockCommandExecutorMockRecorder) RunInteractiveCommand(ctx, name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInteractiveCommand", reflect.TypeOf((*MockCommandExecutor)(nil).RunInteractiveCommand), varargs...)
}

// MockAWSConfigClient is a mock of AWSConfigClient interface.
type MockAWSConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockAWSConfigClientMockRecorder
}

// MockAWSConfigClientMockRecorder is the mock recorder for MockAWSConfigClient.
type MockAWSConfigClientMockRecorder struct {
	mock *MockAWSConfigClient
}

// NewMockAWSConfigClient creates a new mock instance.
func NewMockAWSConfigClient(ctrl *gomock.Controller) *MockAWSConfigClient {
	mock := &MockAWSConfigClient{ctrl: ctrl}
	mock.recorder = &MockAWSConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSConfigClient) EXPECT() *MockAWSConfigClientMockRecorder {
	return m.recorder
}

// ConfigureDefaultProfile mocks base method.
func (m *MockAWSConfigClient) ConfigureDefaultProfile(region, output string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureDefaultProfile", region, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureDefaultProfile indicates an expected call of ConfigureDefaultProfile.
func (mr *MockAWSConfigClientMockRecorder) ConfigureDefaultProfile(region, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDefaultProfile", reflect.TypeOf((*MockAWSConfigClient)(nil).ConfigureDefaultProfile), region, output)
}

// ConfigureGet mocks base method.
func (m *MockAWSConfigClient) ConfigureGet(key, profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureGet", key, profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureGet indicates an expected call of ConfigureGet.
func (mr *MockAWSConfigClientMockRecorder) ConfigureGet(key, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureGet", reflect.TypeOf((*MockAWSConfigClient)(nil).ConfigureGet), key, profile)
}

// ConfigureSSOProfile mocks base method.
func (m *MockAWSConfigClient) ConfigureSSOProfile(profile, region, accountID, role, ssoStartUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureSSOProfile", profile, region, accountID, role, ssoStartUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureSSOProfile indicates an expected call of ConfigureSSOProfile.
func (mr *MockAWSConfigClientMockRecorder) ConfigureSSOProfile(profile, region, accountID, role, ssoStartUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureSSOProfile", reflect.TypeOf((*MockAWSConfigClient)(nil).ConfigureSSOProfile), profile, region, accountID, role, ssoStartUrl)
}

// ConfigureSet mocks base method.
func (m *MockAWSConfigClient) ConfigureSet(key, value, profile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureSet", key, value, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureSet indicates an expected call of ConfigureSet.
func (mr *MockAWSConfigClientMockRecorder) ConfigureSet(key, value, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureSet", reflect.TypeOf((*MockAWSConfigClient)(nil).ConfigureSet), key, value, profile)
}

// GetAWSOutput mocks base method.
func (m *MockAWSConfigClient) GetAWSOutput(profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSOutput", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSOutput indicates an expected call of GetAWSOutput.
func (mr *MockAWSConfigClientMockRecorder) GetAWSOutput(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSOutput", reflect.TypeOf((*MockAWSConfigClient)(nil).GetAWSOutput), profile)
}

// GetAWSRegion mocks base method.
func (m *MockAWSConfigClient) GetAWSRegion(profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSRegion", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSRegion indicates an expected call of GetAWSRegion.
func (mr *MockAWSConfigClientMockRecorder) GetAWSRegion(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSRegion", reflect.TypeOf((*MockAWSConfigClient)(nil).GetAWSRegion), profile)
}

// ValidProfiles mocks base method.
func (m *MockAWSConfigClient) ValidProfiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidProfiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidProfiles indicates an expected call of ValidProfiles.
func (mr *MockAWSConfigClientMockRecorder) ValidProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidProfiles", reflect.TypeOf((*MockAWSConfigClient)(nil).ValidProfiles))
}
