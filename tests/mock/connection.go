// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/interface.go

// Package mock_awsctl is a generated GoMock package.
package mock_awsctl

import (
	context "context"
	reflect "reflect"

	models "github.com/BerryBytes/awsctl/models"
	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2instanceconnect "github.com/aws/aws-sdk-go-v2/service/ec2instanceconnect"
	ssm "github.com/aws/aws-sdk-go-v2/service/ssm"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectionPrompter is a mock of ConnectionPrompter interface.
type MockConnectionPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPrompterMockRecorder
}

// MockConnectionPrompterMockRecorder is the mock recorder for MockConnectionPrompter.
type MockConnectionPrompterMockRecorder struct {
	mock *MockConnectionPrompter
}

// NewMockConnectionPrompter creates a new mock instance.
func NewMockConnectionPrompter(ctrl *gomock.Controller) *MockConnectionPrompter {
	mock := &MockConnectionPrompter{ctrl: ctrl}
	mock.recorder = &MockConnectionPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPrompter) EXPECT() *MockConnectionPrompterMockRecorder {
	return m.recorder
}

// ChooseConnectionMethod mocks base method.
func (m *MockConnectionPrompter) ChooseConnectionMethod() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseConnectionMethod")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseConnectionMethod indicates an expected call of ChooseConnectionMethod.
func (mr *MockConnectionPrompterMockRecorder) ChooseConnectionMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseConnectionMethod", reflect.TypeOf((*MockConnectionPrompter)(nil).ChooseConnectionMethod))
}

// PromptForBastionHost mocks base method.
func (m *MockConnectionPrompter) PromptForBastionHost() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForBastionHost")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForBastionHost indicates an expected call of PromptForBastionHost.
func (mr *MockConnectionPrompterMockRecorder) PromptForBastionHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForBastionHost", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForBastionHost))
}

// PromptForBastionInstance mocks base method.
func (m *MockConnectionPrompter) PromptForBastionInstance(instances []models.EC2Instance) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForBastionInstance", instances)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForBastionInstance indicates an expected call of PromptForBastionInstance.
func (mr *MockConnectionPrompterMockRecorder) PromptForBastionInstance(instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForBastionInstance", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForBastionInstance), instances)
}

// PromptForConfirmation mocks base method.
func (m *MockConnectionPrompter) PromptForConfirmation(prompt string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForConfirmation", prompt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForConfirmation indicates an expected call of PromptForConfirmation.
func (mr *MockConnectionPrompterMockRecorder) PromptForConfirmation(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForConfirmation", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForConfirmation), prompt)
}

// PromptForInstanceID mocks base method.
func (m *MockConnectionPrompter) PromptForInstanceID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForInstanceID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForInstanceID indicates an expected call of PromptForInstanceID.
func (mr *MockConnectionPrompterMockRecorder) PromptForInstanceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForInstanceID", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForInstanceID))
}

// PromptForLocalPort mocks base method.
func (m *MockConnectionPrompter) PromptForLocalPort(usage string, defaultPort int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForLocalPort", usage, defaultPort)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForLocalPort indicates an expected call of PromptForLocalPort.
func (mr *MockConnectionPrompterMockRecorder) PromptForLocalPort(usage, defaultPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForLocalPort", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForLocalPort), usage, defaultPort)
}

// PromptForRegion mocks base method.
func (m *MockConnectionPrompter) PromptForRegion(defaultRegion string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRegion", defaultRegion)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRegion indicates an expected call of PromptForRegion.
func (mr *MockConnectionPrompterMockRecorder) PromptForRegion(defaultRegion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRegion", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForRegion), defaultRegion)
}

// PromptForRemoteHost mocks base method.
func (m *MockConnectionPrompter) PromptForRemoteHost() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRemoteHost")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRemoteHost indicates an expected call of PromptForRemoteHost.
func (mr *MockConnectionPrompterMockRecorder) PromptForRemoteHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRemoteHost", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForRemoteHost))
}

// PromptForRemotePort mocks base method.
func (m *MockConnectionPrompter) PromptForRemotePort(usage string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRemotePort", usage)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRemotePort indicates an expected call of PromptForRemotePort.
func (mr *MockConnectionPrompterMockRecorder) PromptForRemotePort(usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRemotePort", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForRemotePort), usage)
}

// PromptForSOCKSProxyPort mocks base method.
func (m *MockConnectionPrompter) PromptForSOCKSProxyPort(defaultPort int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSOCKSProxyPort", defaultPort)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSOCKSProxyPort indicates an expected call of PromptForSOCKSProxyPort.
func (mr *MockConnectionPrompterMockRecorder) PromptForSOCKSProxyPort(defaultPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSOCKSProxyPort", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForSOCKSProxyPort), defaultPort)
}

// PromptForSSHKeyPath mocks base method.
func (m *MockConnectionPrompter) PromptForSSHKeyPath(defaultPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSSHKeyPath", defaultPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSSHKeyPath indicates an expected call of PromptForSSHKeyPath.
func (mr *MockConnectionPrompterMockRecorder) PromptForSSHKeyPath(defaultPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSSHKeyPath", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForSSHKeyPath), defaultPath)
}

// PromptForSSHUser mocks base method.
func (m *MockConnectionPrompter) PromptForSSHUser(defaultUser string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSSHUser", defaultUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSSHUser indicates an expected call of PromptForSSHUser.
func (mr *MockConnectionPrompterMockRecorder) PromptForSSHUser(defaultUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSSHUser", reflect.TypeOf((*MockConnectionPrompter)(nil).PromptForSSHUser), defaultUser)
}

// SelectAction mocks base method.
func (m *MockConnectionPrompter) SelectAction() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAction")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAction indicates an expected call of SelectAction.
func (mr *MockConnectionPrompterMockRecorder) SelectAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAction", reflect.TypeOf((*MockConnectionPrompter)(nil).SelectAction))
}

// MockEC2ClientInterface is a mock of EC2ClientInterface interface.
type MockEC2ClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEC2ClientInterfaceMockRecorder
}

// MockEC2ClientInterfaceMockRecorder is the mock recorder for MockEC2ClientInterface.
type MockEC2ClientInterfaceMockRecorder struct {
	mock *MockEC2ClientInterface
}

// NewMockEC2ClientInterface creates a new mock instance.
func NewMockEC2ClientInterface(ctrl *gomock.Controller) *MockEC2ClientInterface {
	mock := &MockEC2ClientInterface{ctrl: ctrl}
	mock.recorder = &MockEC2ClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2ClientInterface) EXPECT() *MockEC2ClientInterfaceMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method.
func (m *MockEC2ClientInterface) DescribeInstances(ctx context.Context, input *ec2.DescribeInstancesInput, opts ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockEC2ClientInterfaceMockRecorder) DescribeInstances(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockEC2ClientInterface)(nil).DescribeInstances), varargs...)
}

// ListBastionInstances mocks base method.
func (m *MockEC2ClientInterface) ListBastionInstances(ctx context.Context) ([]models.EC2Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBastionInstances", ctx)
	ret0, _ := ret[0].([]models.EC2Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBastionInstances indicates an expected call of ListBastionInstances.
func (mr *MockEC2ClientInterfaceMockRecorder) ListBastionInstances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBastionInstances", reflect.TypeOf((*MockEC2ClientInterface)(nil).ListBastionInstances), ctx)
}

// MockEC2DescribeInstancesAPI is a mock of EC2DescribeInstancesAPI interface.
type MockEC2DescribeInstancesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEC2DescribeInstancesAPIMockRecorder
}

// MockEC2DescribeInstancesAPIMockRecorder is the mock recorder for MockEC2DescribeInstancesAPI.
type MockEC2DescribeInstancesAPIMockRecorder struct {
	mock *MockEC2DescribeInstancesAPI
}

// NewMockEC2DescribeInstancesAPI creates a new mock instance.
func NewMockEC2DescribeInstancesAPI(ctrl *gomock.Controller) *MockEC2DescribeInstancesAPI {
	mock := &MockEC2DescribeInstancesAPI{ctrl: ctrl}
	mock.recorder = &MockEC2DescribeInstancesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2DescribeInstancesAPI) EXPECT() *MockEC2DescribeInstancesAPIMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method.
func (m *MockEC2DescribeInstancesAPI) DescribeInstances(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockEC2DescribeInstancesAPIMockRecorder) DescribeInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockEC2DescribeInstancesAPI)(nil).DescribeInstances), varargs...)
}

// MockEC2InstanceConnectInterface is a mock of EC2InstanceConnectInterface interface.
type MockEC2InstanceConnectInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEC2InstanceConnectInterfaceMockRecorder
}

// MockEC2InstanceConnectInterfaceMockRecorder is the mock recorder for MockEC2InstanceConnectInterface.
type MockEC2InstanceConnectInterfaceMockRecorder struct {
	mock *MockEC2InstanceConnectInterface
}

// NewMockEC2InstanceConnectInterface creates a new mock instance.
func NewMockEC2InstanceConnectInterface(ctrl *gomock.Controller) *MockEC2InstanceConnectInterface {
	mock := &MockEC2InstanceConnectInterface{ctrl: ctrl}
	mock.recorder = &MockEC2InstanceConnectInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2InstanceConnectInterface) EXPECT() *MockEC2InstanceConnectInterfaceMockRecorder {
	return m.recorder
}

// SendSSHPublicKey mocks base method.
func (m *MockEC2InstanceConnectInterface) SendSSHPublicKey(ctx context.Context, input *ec2instanceconnect.SendSSHPublicKeyInput) (*ec2instanceconnect.SendSSHPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSSHPublicKey", ctx, input)
	ret0, _ := ret[0].(*ec2instanceconnect.SendSSHPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSSHPublicKey indicates an expected call of SendSSHPublicKey.
func (mr *MockEC2InstanceConnectInterfaceMockRecorder) SendSSHPublicKey(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSSHPublicKey", reflect.TypeOf((*MockEC2InstanceConnectInterface)(nil).SendSSHPublicKey), ctx, input)
}

// MockSSMClientInterface is a mock of SSMClientInterface interface.
type MockSSMClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSSMClientInterfaceMockRecorder
}

// MockSSMClientInterfaceMockRecorder is the mock recorder for MockSSMClientInterface.
type MockSSMClientInterfaceMockRecorder struct {
	mock *MockSSMClientInterface
}

// NewMockSSMClientInterface creates a new mock instance.
func NewMockSSMClientInterface(ctrl *gomock.Controller) *MockSSMClientInterface {
	mock := &MockSSMClientInterface{ctrl: ctrl}
	mock.recorder = &MockSSMClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSMClientInterface) EXPECT() *MockSSMClientInterfaceMockRecorder {
	return m.recorder
}

// StartSession mocks base method.
func (m *MockSSMClientInterface) StartSession(ctx context.Context, input *ssm.StartSessionInput) (*ssm.StartSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx, input)
	ret0, _ := ret[0].(*ssm.StartSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockSSMClientInterfaceMockRecorder) StartSession(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockSSMClientInterface)(nil).StartSession), ctx, input)
}

// MockSSMExecutorInterface is a mock of SSMExecutorInterface interface.
type MockSSMExecutorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSSMExecutorInterfaceMockRecorder
}

// MockSSMExecutorInterfaceMockRecorder is the mock recorder for MockSSMExecutorInterface.
type MockSSMExecutorInterfaceMockRecorder struct {
	mock *MockSSMExecutorInterface
}

// NewMockSSMExecutorInterface creates a new mock instance.
func NewMockSSMExecutorInterface(ctrl *gomock.Controller) *MockSSMExecutorInterface {
	mock := &MockSSMExecutorInterface{ctrl: ctrl}
	mock.recorder = &MockSSMExecutorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSMExecutorInterface) EXPECT() *MockSSMExecutorInterfaceMockRecorder {
	return m.recorder
}

// StartPortForwardingSession mocks base method.
func (m *MockSSMExecutorInterface) StartPortForwardingSession(instanceID string, localPort int, remoteHost string, remotePort int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPortForwardingSession", instanceID, localPort, remoteHost, remotePort)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPortForwardingSession indicates an expected call of StartPortForwardingSession.
func (mr *MockSSMExecutorInterfaceMockRecorder) StartPortForwardingSession(instanceID, localPort, remoteHost, remotePort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPortForwardingSession", reflect.TypeOf((*MockSSMExecutorInterface)(nil).StartPortForwardingSession), instanceID, localPort, remoteHost, remotePort)
}

// StartSession mocks base method.
func (m *MockSSMExecutorInterface) StartSession(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSession indicates an expected call of StartSession.
func (mr *MockSSMExecutorInterfaceMockRecorder) StartSession(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockSSMExecutorInterface)(nil).StartSession), instanceID)
}

// MockServicesInterface is a mock of ServicesInterface interface.
type MockServicesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServicesInterfaceMockRecorder
}

// MockServicesInterfaceMockRecorder is the mock recorder for MockServicesInterface.
type MockServicesInterfaceMockRecorder struct {
	mock *MockServicesInterface
}

// NewMockServicesInterface creates a new mock instance.
func NewMockServicesInterface(ctrl *gomock.Controller) *MockServicesInterface {
	mock := &MockServicesInterface{ctrl: ctrl}
	mock.recorder = &MockServicesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicesInterface) EXPECT() *MockServicesInterfaceMockRecorder {
	return m.recorder
}

// SSHIntoBastion mocks base method.
func (m *MockServicesInterface) SSHIntoBastion(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHIntoBastion", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SSHIntoBastion indicates an expected call of SSHIntoBastion.
func (mr *MockServicesInterfaceMockRecorder) SSHIntoBastion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHIntoBastion", reflect.TypeOf((*MockServicesInterface)(nil).SSHIntoBastion), ctx)
}

// StartPortForwarding mocks base method.
func (m *MockServicesInterface) StartPortForwarding(ctx context.Context, localPort int, remoteHost string, remotePort int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPortForwarding", ctx, localPort, remoteHost, remotePort)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPortForwarding indicates an expected call of StartPortForwarding.
func (mr *MockServicesInterfaceMockRecorder) StartPortForwarding(ctx, localPort, remoteHost, remotePort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPortForwarding", reflect.TypeOf((*MockServicesInterface)(nil).StartPortForwarding), ctx, localPort, remoteHost, remotePort)
}

// StartSOCKSProxy mocks base method.
func (m *MockServicesInterface) StartSOCKSProxy(ctx context.Context, port int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSOCKSProxy", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSOCKSProxy indicates an expected call of StartSOCKSProxy.
func (mr *MockServicesInterfaceMockRecorder) StartSOCKSProxy(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSOCKSProxy", reflect.TypeOf((*MockServicesInterface)(nil).StartSOCKSProxy), ctx, port)
}
