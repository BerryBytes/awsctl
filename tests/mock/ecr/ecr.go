// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ecr/interface.go

// Package mock_ecr is a generated GoMock package.
package mock_ecr

import (
	context "context"
	reflect "reflect"

	ecr "github.com/BerryBytes/awsctl/internal/ecr"
	common "github.com/BerryBytes/awsctl/utils/common"
	aws "github.com/aws/aws-sdk-go-v2/aws"
	config "github.com/aws/aws-sdk-go-v2/config"
	ecr0 "github.com/aws/aws-sdk-go-v2/service/ecr"
	gomock "github.com/golang/mock/gomock"
)

// MockECRAPI is a mock of ECRAPI interface.
type MockECRAPI struct {
	ctrl     *gomock.Controller
	recorder *MockECRAPIMockRecorder
}

// MockECRAPIMockRecorder is the mock recorder for MockECRAPI.
type MockECRAPIMockRecorder struct {
	mock *MockECRAPI
}

// NewMockECRAPI creates a new mock instance.
func NewMockECRAPI(ctrl *gomock.Controller) *MockECRAPI {
	mock := &MockECRAPI{ctrl: ctrl}
	mock.recorder = &MockECRAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRAPI) EXPECT() *MockECRAPIMockRecorder {
	return m.recorder
}

// GetAuthorizationToken mocks base method.
func (m *MockECRAPI) GetAuthorizationToken(ctx context.Context, params *ecr0.GetAuthorizationTokenInput, optFns ...func(*ecr0.Options)) (*ecr0.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizationToken", varargs...)
	ret0, _ := ret[0].(*ecr0.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationToken indicates an expected call of GetAuthorizationToken.
func (mr *MockECRAPIMockRecorder) GetAuthorizationToken(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationToken", reflect.TypeOf((*MockECRAPI)(nil).GetAuthorizationToken), varargs...)
}

// MockECRAdapterInterface is a mock of ECRAdapterInterface interface.
type MockECRAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockECRAdapterInterfaceMockRecorder
}

// MockECRAdapterInterfaceMockRecorder is the mock recorder for MockECRAdapterInterface.
type MockECRAdapterInterfaceMockRecorder struct {
	mock *MockECRAdapterInterface
}

// NewMockECRAdapterInterface creates a new mock instance.
func NewMockECRAdapterInterface(ctrl *gomock.Controller) *MockECRAdapterInterface {
	mock := &MockECRAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockECRAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRAdapterInterface) EXPECT() *MockECRAdapterInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockECRAdapterInterface) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockECRAdapterInterfaceMockRecorder) Login(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockECRAdapterInterface)(nil).Login), ctx)
}

// MockConfigLoader is a mock of ConfigLoader interface.
type MockConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigLoaderMockRecorder
}

// MockConfigLoaderMockRecorder is the mock recorder for MockConfigLoader.
type MockConfigLoaderMockRecorder struct {
	mock *MockConfigLoader
}

// NewMockConfigLoader creates a new mock instance.
func NewMockConfigLoader(ctrl *gomock.Controller) *MockConfigLoader {
	mock := &MockConfigLoader{ctrl: ctrl}
	mock.recorder = &MockConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigLoader) EXPECT() *MockConfigLoaderMockRecorder {
	return m.recorder
}

// LoadDefaultConfig mocks base method.
func (m *MockConfigLoader) LoadDefaultConfig(ctx context.Context, opts ...func(*config.LoadOptions) error) (aws.Config, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadDefaultConfig", varargs...)
	ret0, _ := ret[0].(aws.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDefaultConfig indicates an expected call of LoadDefaultConfig.
func (mr *MockConfigLoaderMockRecorder) LoadDefaultConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDefaultConfig", reflect.TypeOf((*MockConfigLoader)(nil).LoadDefaultConfig), varargs...)
}

// MockECRServiceInterface is a mock of ECRServiceInterface interface.
type MockECRServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockECRServiceInterfaceMockRecorder
}

// MockECRServiceInterfaceMockRecorder is the mock recorder for MockECRServiceInterface.
type MockECRServiceInterfaceMockRecorder struct {
	mock *MockECRServiceInterface
}

// NewMockECRServiceInterface creates a new mock instance.
func NewMockECRServiceInterface(ctrl *gomock.Controller) *MockECRServiceInterface {
	mock := &MockECRServiceInterface{ctrl: ctrl}
	mock.recorder = &MockECRServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRServiceInterface) EXPECT() *MockECRServiceInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockECRServiceInterface) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockECRServiceInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockECRServiceInterface)(nil).Run))
}

// MockECRClientFactory is a mock of ECRClientFactory interface.
type MockECRClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockECRClientFactoryMockRecorder
}

// MockECRClientFactoryMockRecorder is the mock recorder for MockECRClientFactory.
type MockECRClientFactoryMockRecorder struct {
	mock *MockECRClientFactory
}

// NewMockECRClientFactory creates a new mock instance.
func NewMockECRClientFactory(ctrl *gomock.Controller) *MockECRClientFactory {
	mock := &MockECRClientFactory{ctrl: ctrl}
	mock.recorder = &MockECRClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRClientFactory) EXPECT() *MockECRClientFactoryMockRecorder {
	return m.recorder
}

// NewECRClient mocks base method.
func (m *MockECRClientFactory) NewECRClient(cfg aws.Config, fs common.FileSystemInterface, executor common.CommandExecutor) ecr.ECRAdapterInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewECRClient", cfg, fs, executor)
	ret0, _ := ret[0].(ecr.ECRAdapterInterface)
	return ret0
}

// NewECRClient indicates an expected call of NewECRClient.
func (mr *MockECRClientFactoryMockRecorder) NewECRClient(cfg, fs, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewECRClient", reflect.TypeOf((*MockECRClientFactory)(nil).NewECRClient), cfg, fs, executor)
}

// MockProfileProvider is a mock of ProfileProvider interface.
type MockProfileProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProfileProviderMockRecorder
}

// MockProfileProviderMockRecorder is the mock recorder for MockProfileProvider.
type MockProfileProviderMockRecorder struct {
	mock *MockProfileProvider
}

// NewMockProfileProvider creates a new mock instance.
func NewMockProfileProvider(ctrl *gomock.Controller) *MockProfileProvider {
	mock := &MockProfileProvider{ctrl: ctrl}
	mock.recorder = &MockProfileProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileProvider) EXPECT() *MockProfileProviderMockRecorder {
	return m.recorder
}

// ValidProfiles mocks base method.
func (m *MockProfileProvider) ValidProfiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidProfiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidProfiles indicates an expected call of ValidProfiles.
func (mr *MockProfileProviderMockRecorder) ValidProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidProfiles", reflect.TypeOf((*MockProfileProvider)(nil).ValidProfiles))
}

// MockECRPromptInterface is a mock of ECRPromptInterface interface.
type MockECRPromptInterface struct {
	ctrl     *gomock.Controller
	recorder *MockECRPromptInterfaceMockRecorder
}

// MockECRPromptInterfaceMockRecorder is the mock recorder for MockECRPromptInterface.
type MockECRPromptInterfaceMockRecorder struct {
	mock *MockECRPromptInterface
}

// NewMockECRPromptInterface creates a new mock instance.
func NewMockECRPromptInterface(ctrl *gomock.Controller) *MockECRPromptInterface {
	mock := &MockECRPromptInterface{ctrl: ctrl}
	mock.recorder = &MockECRPromptInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRPromptInterface) EXPECT() *MockECRPromptInterfaceMockRecorder {
	return m.recorder
}

// PromptForProfile mocks base method.
func (m *MockECRPromptInterface) PromptForProfile() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForProfile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForProfile indicates an expected call of PromptForProfile.
func (mr *MockECRPromptInterfaceMockRecorder) PromptForProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForProfile", reflect.TypeOf((*MockECRPromptInterface)(nil).PromptForProfile))
}

// SelectECRAction mocks base method.
func (m *MockECRPromptInterface) SelectECRAction() (ecr.ECRAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectECRAction")
	ret0, _ := ret[0].(ecr.ECRAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectECRAction indicates an expected call of SelectECRAction.
func (mr *MockECRPromptInterfaceMockRecorder) SelectECRAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectECRAction", reflect.TypeOf((*MockECRPromptInterface)(nil).SelectECRAction))
}
