// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/common/ssh.go

// Package mock_awsctl is a generated GoMock package.
package mock_awsctl

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSSHExecutorInterface is a mock of SSHExecutorInterface interface.
type MockSSHExecutorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSSHExecutorInterfaceMockRecorder
}

// MockSSHExecutorInterfaceMockRecorder is the mock recorder for MockSSHExecutorInterface.
type MockSSHExecutorInterfaceMockRecorder struct {
	mock *MockSSHExecutorInterface
}

// NewMockSSHExecutorInterface creates a new mock instance.
func NewMockSSHExecutorInterface(ctrl *gomock.Controller) *MockSSHExecutorInterface {
	mock := &MockSSHExecutorInterface{ctrl: ctrl}
	mock.recorder = &MockSSHExecutorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHExecutorInterface) EXPECT() *MockSSHExecutorInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSSHExecutorInterface) Execute(args []string, stdin io.Reader, stdout, stderr io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", args, stdin, stdout, stderr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSSHExecutorInterfaceMockRecorder) Execute(args, stdin, stdout, stderr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSSHExecutorInterface)(nil).Execute), args, stdin, stdout, stderr)
}

// MockOSDetector is a mock of OSDetector interface.
type MockOSDetector struct {
	ctrl     *gomock.Controller
	recorder *MockOSDetectorMockRecorder
}

// MockOSDetectorMockRecorder is the mock recorder for MockOSDetector.
type MockOSDetectorMockRecorder struct {
	mock *MockOSDetector
}

// NewMockOSDetector creates a new mock instance.
func NewMockOSDetector(ctrl *gomock.Controller) *MockOSDetector {
	mock := &MockOSDetector{ctrl: ctrl}
	mock.recorder = &MockOSDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSDetector) EXPECT() *MockOSDetectorMockRecorder {
	return m.recorder
}

// GetOS mocks base method.
func (m *MockOSDetector) GetOS() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOS")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOS indicates an expected call of GetOS.
func (mr *MockOSDetectorMockRecorder) GetOS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOS", reflect.TypeOf((*MockOSDetector)(nil).GetOS))
}
