// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/sso/sso_helper.go

// Package mock_sso is a generated GoMock package.
package mock_sso

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAWSSSOClient is a mock of AWSSSOClient interface.
type MockAWSSSOClient struct {
	ctrl     *gomock.Controller
	recorder *MockAWSSSOClientMockRecorder
}

// MockAWSSSOClientMockRecorder is the mock recorder for MockAWSSSOClient.
type MockAWSSSOClientMockRecorder struct {
	mock *MockAWSSSOClient
}

// NewMockAWSSSOClient creates a new mock instance.
func NewMockAWSSSOClient(ctrl *gomock.Controller) *MockAWSSSOClient {
	mock := &MockAWSSSOClient{ctrl: ctrl}
	mock.recorder = &MockAWSSSOClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSSSOClient) EXPECT() *MockAWSSSOClientMockRecorder {
	return m.recorder
}

// ConfigureSSO mocks base method.
func (m *MockAWSSSOClient) ConfigureSSO() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureSSO")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureSSO indicates an expected call of ConfigureSSO.
func (mr *MockAWSSSOClientMockRecorder) ConfigureSSO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureSSO", reflect.TypeOf((*MockAWSSSOClient)(nil).ConfigureSSO))
}

// GetCachedSsoAccessToken mocks base method.
func (m *MockAWSSSOClient) GetCachedSsoAccessToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedSsoAccessToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedSsoAccessToken indicates an expected call of GetCachedSsoAccessToken.
func (mr *MockAWSSSOClientMockRecorder) GetCachedSsoAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedSsoAccessToken", reflect.TypeOf((*MockAWSSSOClient)(nil).GetCachedSsoAccessToken))
}

// GetSSOAccountName mocks base method.
func (m *MockAWSSSOClient) GetSSOAccountName(accountID, profile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSOAccountName", accountID, profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSOAccountName indicates an expected call of GetSSOAccountName.
func (mr *MockAWSSSOClientMockRecorder) GetSSOAccountName(accountID, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSOAccountName", reflect.TypeOf((*MockAWSSSOClient)(nil).GetSSOAccountName), accountID, profile)
}

// GetSSOProfiles mocks base method.
func (m *MockAWSSSOClient) GetSSOProfiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSOProfiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSOProfiles indicates an expected call of GetSSOProfiles.
func (mr *MockAWSSSOClientMockRecorder) GetSSOProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSOProfiles", reflect.TypeOf((*MockAWSSSOClient)(nil).GetSSOProfiles))
}

// GetSSORoles mocks base method.
func (m *MockAWSSSOClient) GetSSORoles(profile, accountID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSORoles", profile, accountID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSORoles indicates an expected call of GetSSORoles.
func (mr *MockAWSSSOClientMockRecorder) GetSSORoles(profile, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSORoles", reflect.TypeOf((*MockAWSSSOClient)(nil).GetSSORoles), profile, accountID)
}

// SSOLogin mocks base method.
func (m *MockAWSSSOClient) SSOLogin(awsProfile string, refresh, noBrowser bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOLogin", awsProfile, refresh, noBrowser)
	ret0, _ := ret[0].(error)
	return ret0
}

// SSOLogin indicates an expected call of SSOLogin.
func (mr *MockAWSSSOClientMockRecorder) SSOLogin(awsProfile, refresh, noBrowser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOLogin", reflect.TypeOf((*MockAWSSSOClient)(nil).SSOLogin), awsProfile, refresh, noBrowser)
}
