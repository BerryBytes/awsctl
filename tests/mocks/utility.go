// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/sso/utility.go

// Package mock_sso is a generated GoMock package.
package mock_sso

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAWSUtilityClient is a mock of AWSUtilityClient interface.
type MockAWSUtilityClient struct {
	ctrl     *gomock.Controller
	recorder *MockAWSUtilityClientMockRecorder
}

// MockAWSUtilityClientMockRecorder is the mock recorder for MockAWSUtilityClient.
type MockAWSUtilityClientMockRecorder struct {
	mock *MockAWSUtilityClient
}

// NewMockAWSUtilityClient creates a new mock instance.
func NewMockAWSUtilityClient(ctrl *gomock.Controller) *MockAWSUtilityClient {
	mock := &MockAWSUtilityClient{ctrl: ctrl}
	mock.recorder = &MockAWSUtilityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSUtilityClient) EXPECT() *MockAWSUtilityClientMockRecorder {
	return m.recorder
}

// AbortSetup mocks base method.
func (m *MockAWSUtilityClient) AbortSetup(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortSetup", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortSetup indicates an expected call of AbortSetup.
func (mr *MockAWSUtilityClientMockRecorder) AbortSetup(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortSetup", reflect.TypeOf((*MockAWSUtilityClient)(nil).AbortSetup), err)
}

// PrintCurrentRole mocks base method.
func (m *MockAWSUtilityClient) PrintCurrentRole(profile, accountID, accountName, roleName, roleARN, expiration string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintCurrentRole", profile, accountID, accountName, roleName, roleARN, expiration)
}

// PrintCurrentRole indicates an expected call of PrintCurrentRole.
func (mr *MockAWSUtilityClientMockRecorder) PrintCurrentRole(profile, accountID, accountName, roleName, roleARN, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintCurrentRole", reflect.TypeOf((*MockAWSUtilityClient)(nil).PrintCurrentRole), profile, accountID, accountName, roleName, roleARN, expiration)
}
