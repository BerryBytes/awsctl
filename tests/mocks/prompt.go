// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/prompt/prompt.go

// Package mock_sso is a generated GoMock package.
package mock_sso

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// PromptForConfirmation mocks base method.
func (m *MockPrompter) PromptForConfirmation(prompt string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForConfirmation", prompt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PromptForConfirmation indicates an expected call of PromptForConfirmation.
func (mr *MockPrompterMockRecorder) PromptForConfirmation(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForConfirmation", reflect.TypeOf((*MockPrompter)(nil).PromptForConfirmation), prompt)
}

// PromptForSelection mocks base method.
func (m *MockPrompter) PromptForSelection(label string, items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForSelection", label, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForSelection indicates an expected call of PromptForSelection.
func (mr *MockPrompterMockRecorder) PromptForSelection(label, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForSelection", reflect.TypeOf((*MockPrompter)(nil).PromptForSelection), label, items)
}
